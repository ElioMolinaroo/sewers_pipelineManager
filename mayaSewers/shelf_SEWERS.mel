global proc shelf_SEWERS () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Connects you to the Sewers" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "SEWERS CONNECTION" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "connect" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/3D3A/Desktop/sewersPipeline/sewers_pipelineManager/icons/sewersConnectAlt.png"
        -image "C:/Users/3D3A/Desktop/sewersPipeline/sewers_pipelineManager/icons/sewersConnectAlt.png"
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import maya.cmds as cmds\nif not cmds.commandPort(':5051', query=1):\n    cmds.commandPort(name=\":5051\", sourceType=\"python\")" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Saves a version of the currently opened file" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "SEWERS VERSIONING" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "version" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/3D3A/Desktop/sewersPipeline/sewers_pipelineManager/icons/saveVersionAlt.png"
        -image "C:/Users/3D3A/Desktop/sewersPipeline/sewers_pipelineManager/icons/saveVersionAlt.png"
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pathlib import Path\n\nfrom maya import cmds\n\n# Get the data from the scene\nfull_path = cmds.file(query=1, sceneName=1)\nextension = Path(full_path).suffix\nscene_name = str(Path(full_path).name).removesuffix(extension)\npath_to_scene = Path(full_path).parent\n\n# Check if the file follows the correct naming convention\nif \"_E_\" not in scene_name:\n    raise NameError(\"Your file doesn't follow the edit naming convention\")\n\n# Rename the file and the path\nroot_name, number = scene_name.split('_E_')\nnew_scene_name = f\"{root_name}_E_{str(int(number)+1).zfill(3)}{extension}\"\nnew_path = Path(path_to_scene) / new_scene_name\n\n# Increment the file\ncmds.file(rename=new_path)\ncmds.file(save=1)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Publishes your file in the correct folder" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "SEWERS PUBLISH" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "publish" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/3D3A/Desktop/sewersPipeline/sewers_pipelineManager/icons/publishAlt.png"
        -image "C:/Users/3D3A/Desktop/sewersPipeline/sewers_pipelineManager/icons/publishAlt.png"
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pathlib import Path\nimport os\n\nfrom maya import cmds\n\n# Get the data from the scene\nfull_path = cmds.file(query=1, sceneName=1)\nextension = Path(full_path).suffix\nscene_name = str(Path(full_path).name).removesuffix(extension)\npath_to_scene = Path(full_path).parent\n\n# Check if a publish folder exists\ntest_path = str(path_to_scene).replace(\"edit\", \"publish\")\nif len(test_path)<=2 and Path(test_path).exists() is False:\n    raise ValueError(\"The folder structure doesn't seem to have a publish folder, check and try again\")\n\n# Check for a publish set\nif cmds.objExists(\"publish\") is False:\n    raise KeyError(\"There is no publish set in your scene, make sure to create one and put everything to be published inside\")\nelif cmds.sets(\"publish\", q=1) is None:\n    raise ValueError(\"Your publish set seems to be empty.\")\n\n# Check if a publish file exists\npublish_name = scene_name.split('_E_')[0] + \"_P.mb\"\npublish_path = Path(test_path) / publish_name\npublish_exists = publish_path.exists()\n\nif publish_exists is True:\n    # Create the backup folder if it doesn't exist\n    backup_path = Path(test_path) / \"backup\"\n    backup_path.mkdir(exist_ok=True)\n\n    # Move the current publish to the backup folder with a different name\n    publish_backups = os.listdir(str(backup_path))\n    raw_name = Path(publish_name).stem\n    extension = Path(publish_name).suffix\n    file_backup_path = Path(backup_path) / f\"{raw_name}_{str(len(publish_backups)+1).zfill(3)}{extension}\"\n\n    Path(publish_path).rename(file_backup_path)\n\n# Publish the file\npublish_contents = cmds.sets(\"publish\", q=1)\ncmds.select(publish_contents, r=1, ne=1)\ncmds.file(publish_path, typ=\"mayaBinary\", es=1)\ncmds.select(d=1)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
